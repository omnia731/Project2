version: '3'
services:
  login-frontend:
    build: ./login/front-end
    container_name: login-frontend
    ports:
      - "4500:8080"
    networks:
      - app-network
    depends_on:
      - login-backend


  login-backend:
    build: ./login/backend
    container_name: login-backend
    ports:
      - "8000:8000"
    environment:
      - MONGODB_URI=mongodb://mongo:27017/loginDB
    networks:
      - app-network
    depends_on:
      - mongo
    restart: always
    command: ["npm", "start"]


  dashboard-frontend:
    build: ./dashboard/front-end
    container_name: dashboard-frontend
    ports:
      - "4501:8080"
    networks:
      - app-network
    depends_on:
      - dashboard-backend

  dashboard-backend:
    build: ./dashboard/backend
    container_name: dashboard-backend
    ports:
      - "8001:8000"
    environment:
      - MONGODB_URI=mongodb://mongo:27017/dashboardDB
    networks:
      - app-network
    depends_on:
      - mongo
    command: ["npm", "start"]


  mongo:
    image: mongo:latest
    container_name: mongo
    volumes:
      - ./data:/data/db
    networks:
      - app-network
    ports:
      - "27018:27017"  # منفذ MongoDB على جهازك المحلي


  zookeeper:
     image: confluentinc/cp-zookeeper:7.0.1
     container_name: zookeeper
     environment:
       ZOOKEEPER_CLIENT_PORT: 2181
     ports:
      - "2181:2181"
     networks:
      - app-network

  kafka:
     image: confluentinc/cp-kafka:7.0.1
     container_name: kafka
     depends_on:
      - zookeeper
     ports:
      - "9092:9092"
     environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_NUM_PARTITIONS: 1
      KAFKA_LOG_RETENTION_HOURS: 24
     networks:
      - app-network




  producer:
    build:
      context: ./simulation-app
    depends_on:
      - kafka
      - mongo
    container_name: producer
    restart: always
    volumes:
      - ./dashboard/backend:/usr/src/app/dashboard/backend
      - ./simulation-app:/app/simulation-app
    working_dir: /app
    environment:
      KAFKA_BROKER: kafka:9092
    command: ["node", "producer.js"]
    networks:
      - app-network

  consumer:
    build:
      context: ./simulation-app
    container_name: consumer
    depends_on:
      - kafka
      - zookeeper
      - mongo
    restart: always
    volumes:
      - ./dashboard/backend:/usr/src/app/dashboard/backend
      - ./simulation-app:/app/simulation-app
    working_dir: /app
    environment:
      MONGODB_URI: mongodb://mongo:27017/dashboardDB
      KAFKA_BROKER: kafka:9092
    command:  ["node", "consumer.js"]
    networks:
      - app-network


networks:
  app-network:
    driver: bridge
